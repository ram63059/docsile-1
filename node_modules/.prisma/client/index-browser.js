
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.1.0
 * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
 */
Prisma.prismaVersion = {
  client: "6.1.0",
  engine: "11f085a2012c0f4778414c8db2651556ee0ef959"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  category: 'category',
  email: 'email',
  password: 'password',
  name: 'name',
  gender: 'gender',
  department: 'department',
  country: 'country',
  city: 'city',
  organisation_name: 'organisation_name',
  specialisation_field_of_study: 'specialisation_field_of_study',
  register_number: 'register_number',
  verified: 'verified',
  date_of_birth: 'date_of_birth',
  created_at: 'created_at'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  id: 'id',
  registrationNo: 'registrationNo',
  doctors: 'doctors'
};

exports.Prisma.AchievementsAwardsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  awardName: 'awardName',
  awardedBy: 'awardedBy',
  awardedOn: 'awardedOn',
  descreption: 'descreption'
};

exports.Prisma.OrganisationsScalarFieldEnum = {
  id: 'id',
  category: 'category',
  email: 'email',
  password: 'password',
  organisation_name: 'organisation_name',
  country: 'country',
  city: 'city',
  organisation_type: 'organisation_type',
  register_number: 'register_number',
  verified: 'verified',
  founding_year: 'founding_year',
  created_at: 'created_at'
};

exports.Prisma.JobsScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.ConferrencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.SkillsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skill: 'skill'
};

exports.Prisma.PostsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  posted_at: 'posted_at'
};

exports.Prisma.PostImageLinksScalarFieldEnum = {
  id: 'id',
  postsId: 'postsId',
  postImageLink: 'postImageLink'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  postsId: 'postsId',
  comment: 'comment',
  commented_at: 'commented_at'
};

exports.Prisma.LikesScalarFieldEnum = {
  id: 'id',
  postsId: 'postsId',
  liked_user_id: 'liked_user_id'
};

exports.Prisma.RepostsScalarFieldEnum = {
  id: 'id',
  postsId: 'postsId',
  reposted_user_id: 'reposted_user_id'
};

exports.Prisma.SharesScalarFieldEnum = {
  id: 'id',
  postsId: 'postsId',
  shared_user_id: 'shared_user_id'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  question: 'question',
  question_description: 'question_description',
  asked_at: 'asked_at'
};

exports.Prisma.QuestionReferencesScalarFieldEnum = {
  id: 'id',
  questionsId: 'questionsId',
  reference: 'reference'
};

exports.Prisma.QuestionCommentsScalarFieldEnum = {
  id: 'id',
  questionsId: 'questionsId',
  comment: 'comment',
  comment_user_id: 'comment_user_id'
};

exports.Prisma.AnswersScalarFieldEnum = {
  id: 'id',
  questionsId: 'questionsId',
  answered_user_id: 'answered_user_id',
  answer_description: 'answer_description'
};

exports.Prisma.Answer_Image_LinksScalarFieldEnum = {
  id: 'id',
  answersId: 'answersId',
  answer_image_link: 'answer_image_link'
};

exports.Prisma.QuestionImageLinksScalarFieldEnum = {
  id: 'id',
  questionsId: 'questionsId'
};

exports.Prisma.InsightfulScalarFieldEnum = {
  id: 'id',
  questionsId: 'questionsId',
  insightful_user_id: 'insightful_user_id'
};

exports.Prisma.FriendsScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.CertificationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  certificateName: 'certificateName',
  issuingOrganisation: 'issuingOrganisation',
  issueDate: 'issueDate',
  descreption: 'descreption',
  certificateURL: 'certificateURL',
  certificateMediaLink: 'certificateMediaLink'
};

exports.Prisma.MembershipsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  societyname: 'societyname',
  position: 'position',
  relatedDepartment: 'relatedDepartment',
  membershipId: 'membershipId'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  schoolName: 'schoolName',
  degree: 'degree',
  department: 'department',
  startDate: 'startDate',
  endDate: 'endDate',
  grade: 'grade'
};

exports.Prisma.ProfessionalExperienceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  organisation: 'organisation',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Doctors: 'Doctors',
  AchievementsAwards: 'AchievementsAwards',
  Organisations: 'Organisations',
  Jobs: 'Jobs',
  Conferrences: 'Conferrences',
  Skills: 'Skills',
  Posts: 'Posts',
  PostImageLinks: 'PostImageLinks',
  Comments: 'Comments',
  Likes: 'Likes',
  Reposts: 'Reposts',
  Shares: 'Shares',
  Questions: 'Questions',
  QuestionReferences: 'QuestionReferences',
  QuestionComments: 'QuestionComments',
  Answers: 'Answers',
  Answer_Image_Links: 'Answer_Image_Links',
  QuestionImageLinks: 'QuestionImageLinks',
  Insightful: 'Insightful',
  Friends: 'Friends',
  Certifications: 'Certifications',
  Memberships: 'Memberships',
  Education: 'Education',
  ProfessionalExperience: 'ProfessionalExperience'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
