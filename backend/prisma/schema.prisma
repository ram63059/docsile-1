// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int                      @id @default(autoincrement())
  category                      String
  email                         String                   @unique
  password                      String
  name                          String
  gender                        String?
  department                    String?
  country                       String?
  city                          String?
  college                       String?
  specialization                String?
  organisation_name             String?
  specialisation_field_of_study String?
  register_number               String?
  verified                      Boolean                  @default(false)
  date_of_birth                 DateTime?
  created_at                    DateTime                 @default(now())
  skills                        Skills[]
  post                         Post[]
  questions                     Questions[]
  friends                       Friends[]
  certifications                Certifications[]
  memberships                   Memberships[]
  education                     Education[]
  professionalExperience        ProfessionalExperience[]
  jobs                          Jobs[]
  conferrences                  Conferrences[]
  achievementsAwards            AchievementsAwards[]
  comments   Comment[]
  Like       Like[]
  following    Follow[] @relation("following")
  followers    Follow[] @relation("followers")
  answers    Answers[]
  questionComments QuestionComments[]

  conversations1 Conversation[] @relation("User1")
  conversations2 Conversation[] @relation("User2")
  messages    Message[]
  groupMemberships GroupMember[]
  createdGroups  Group[]
  groupMessages  GroupMessage[]
}


model Conversation {
  id          Int          @id @default(autoincrement())
  user1Id     Int
  user2Id     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  messages    Message[]
  User1       User         @relation("User1", fields: [user1Id], references: [id])
  User2       User         @relation("User2", fields: [user2Id], references: [id])
}


model Message {
  id              Int          @id @default(autoincrement())
  conversationId  Int
  senderId        Int
  content         String
  attachmentUrl   String?
  sentAt          DateTime     @default(now())
  isEdited        Boolean      @default(false)
  Conversation    Conversation @relation(fields: [conversationId], references: [id])
  Sender          User         @relation(fields: [senderId], references: [id])
}


model Group {
  id              Int             @id @default(autoincrement())
  name            String
  creatorId       Int
  creator         User            @relation(fields: [creatorId], references: [id])
  groupMemberships GroupMember[]
  messages        GroupMessage[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model GroupMessage {
  id          Int       @id @default(autoincrement())
  content     String
  senderId    Int
  sender      User      @relation(fields: [senderId], references: [id])
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id])
  createdAt   DateTime  @default(now())
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([userId, groupId]) // Ensure a user cannot join the same group multiple times
}

// model User {
//   id                            Int                      @id @default(autoincrement())
//   category                      String
//   email                         String                   @unique
//   password                      String
//   name                          String?
//   gender                        String?
//   department                    String?
//   country                       String?
//   city                          String?
//   organisation_name             String?
//   specialisation_field_of_study String?
//   register_number               String?
//   verified                      Boolean                  @default(false)
//   date_of_birth                 DateTime?
//   created_at                    DateTime                 @default(now())
//   skills                        Skills[]
//   post                         Post[]
//   questions                     Questions[]
//   friends                       Friends[]
//   certifications                Certifications[]
//   memberships                   Memberships[]
//   education                     Education[]
//   professionalExperience        ProfessionalExperience[]
//   jobs                          Jobs[]
//   conferrences                  Conferrences[]
//   achievementsAwards            AchievementsAwards[]
//   comments   Comment[]
//   Like Like[]
//   following    Follow[] @relation("UserFollowing")
//   followers    Follow[] @relation("UserFollowers")
// }

model Doctors {
  id Int @id @default(autoincrement())
  registrationNo String
  doctors String
}

model AchievementsAwards {
  id Int @id @default(autoincrement())

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  awardName   String?
  awardedBy   String?
  awardedOn   String?
  descreption String?
}

model Organisations {
  id                Int       @id @default(autoincrement())
  category          String
  email             String    @unique
  password          String
  organisation_name String?
  country           String?
  city              String?
  organisation_type String?
  register_number   String?
  verified          Boolean   @default(false)
  founding_year     DateTime?
  created_at        DateTime  @default(now())
}

//Jobs

model Jobs {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

//Conferrences

model Conferrences {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

//skillss

model Skills {
  id     Int    @id @default(autoincrement())
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
  skill  String
}

//posts

// model Posts {
//   id             Int              @id @default(autoincrement())
//   User           User?            @relation(fields: [userId], references: [id])
//   userId         Int?
//   title          String?
//   description    String?
//   postImageLinks PostImageLinks[]
//   posted_at      DateTime         @default(now())
//   comments       Comments[]
//   likes          Likes[]
//   reposts        Reposts[]
//   shares         Shares[]
// }

model Post {
  id         String    @id @default(uuid())
  userId     Int       // Changed from String to Int
  user       User      @relation(fields: [userId], references: [id])
  content    String
  mediaUrl   String?
  city       String    // Location of the post
  college    String?   // Applicable for Student posts
  specialization String? // Applicable for Doctor posts
  media      String[]  // Array of image URLs
  shares     Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  likes      Like[]
}

model Comment {
  id         String   @id @default(uuid())
  postId     String
  post       Post     @relation(fields: [postId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  content    String
  createdAt  DateTime @default(now())
}
model Like {
  id         String   @id @default(uuid())
  postId     String
  post       Post     @relation(fields: [postId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

// model Follow {
//   id         String   @id @default(uuid())
//   followerId Int
//   followingId Int
//   follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
//   following   User     @relation("UserFollowing", fields: [followingId], references: [id])
//   createdAt   DateTime @default(now())
// }

model Follow {
  id        String   @id @default(uuid())
  followerId Int
  followingId Int

  follower     User     @relation("followers", fields: [followerId], references: [id])
  following    User     @relation("following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  @@unique([followerId, followingId]) // Ensure a user can't follow the same user multiple times
}

// model PostImageLinks {
//   id            Int     @id @default(autoincrement())
//   Posts         Posts?  @relation(fields: [postsId], references: [id])
//   postsId       Int?
//   postImageLink String?
// }

// model Comments {
//   id           Int      @id @default(autoincrement())
//   Posts        Posts?   @relation(fields: [postsId], references: [id])
//   postsId      Int?
//   comment      String
//   commented_at DateTime @default(now())
// }

// model Likes {
//   id            Int    @id @default(autoincrement())
//   Posts         Posts? @relation(fields: [postsId], references: [id])
//   postsId       Int?
//   liked_user_id Int?
// }

// model Reposts {
//   id               Int    @id @default(autoincrement())
//   Posts            Posts? @relation(fields: [postsId], references: [id])
//   postsId          Int?
//   reposted_user_id Int?
// }

// model Shares {
//   id             Int    @id @default(autoincrement())
//   Posts          Posts? @relation(fields: [postsId], references: [id])
//   postsId        Int?
//   shared_user_id Int?
// }






//questions

// model Questions {
//   id                   Int                  @id @default(autoincrement())
//   User                 User?                @relation(fields: [userId], references: [id])
//   userId               Int?
//   question             String
//   question_description String
//   asked_at             DateTime             @default(now())
//   question_image_links QuestionImageLinks[]
//   insightful           Insightful[]
//   answers              Answers[]
//   questionComments     QuestionComments[]
//   questionReferences   QuestionReferences[]
// }




model Questions {
  id                   Int                  @id @default(autoincrement())
  userId               Int?                
  User                 User?                @relation(fields: [userId], references: [id])
  question             String
  question_description String?
  asked_at             DateTime             @default(now())
  state                String?
  urgency              String?
  likes                Int                  @default(0)
  dislikes             Int                  @default(0)
  shares               Int                  @default(0)
  question_image_links QuestionImageLinks[]
  answers              Answers[]
  questionComments     QuestionComments[]
  questionReferences   QuestionReferences[]
}




model Answers {
  id                Int                @id @default(autoincrement())
  questionsId       Int?
  Questions         Questions?         @relation(fields: [questionsId], references: [id])
  userId            Int?
  User              User?              @relation(fields: [userId], references: [id])
  content           String
  created_at        DateTime           @default(now())
}


model QuestionComments {
  id          Int       @id @default(autoincrement())
  questionId  Int
  Questions   Questions @relation(fields: [questionId], references: [id])
  userId      Int
  User        User      @relation(fields: [userId], references: [id])
  content     String
  created_at  DateTime  @default(now())
}



model QuestionImageLinks {
  id          Int       @id @default(autoincrement())
  questionId  Int
  Questions   Questions @relation(fields: [questionId], references: [id])
  imageUrl    String
}









model QuestionReferences {
  id          Int        @id @default(autoincrement())
  Questions   Questions? @relation(fields: [questionsId], references: [id])
  questionsId Int?
  reference   String?
}

// model QuestionComments {
//   id              Int        @id @default(autoincrement())
//   Questions       Questions? @relation(fields: [questionsId], references: [id])
//   questionsId     Int?
//   comment         String
//   comment_user_id Int
// }

// model Answers {
//   id                 Int                  @id @default(autoincrement())
//   Questions          Questions?           @relation(fields: [questionsId], references: [id])
//   questionsId        Int?
//   answered_user_id   String
//   answer_description String
//   answer_image_links Answer_Image_Links[]
// }

// model Answer_Image_Links {
//   id                Int      @id @default(autoincrement())
//   Answers           Answers? @relation(fields: [answersId], references: [id])
//   answersId         Int?
//   answer_image_link String?
// }

// model QuestionImageLinks {
//   id          Int        @id @default(autoincrement())
//   Questions   Questions? @relation(fields: [questionsId], references: [id])
//   questionsId Int?
// }

// model Insightful {
//   id                 Int        @id @default(autoincrement())
//   Questions          Questions? @relation(fields: [questionsId], references: [id])
//   questionsId        Int?
//   insightful_user_id String?
// }

//friends

model Friends {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

//certifications

model Certifications {
  id                   Int     @id @default(autoincrement())
  User                 User?   @relation(fields: [userId], references: [id])
  userId               Int?
  certificateName      String?
  issuingOrganisation  String?
  issueDate            String?
  descreption          String?
  certificateURL       String?
  certificateMediaLink String?
}

//memberships

model Memberships {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  societyname String?
  position String?
  relatedDepartment String?
  membershipId String?
}

//educationss

model Education {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  schoolName String?
  degree String?
  department String?
  startDate String?
  endDate String?
  grade String?
}

//professuionalExperience

model ProfessionalExperience {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  title String?
  organisation String?
  startDate String?
  endDate String?
  location String?
}


// model PrecomputedFeed {
//   id        String   @id @default(cuid())
//   userId    String   // User receiving the feed
//   postId    String   // Post to display in feed
//   post      Post     @relation(fields: [postId], references: [id])
//   createdAt DateTime @default(now())
// } 